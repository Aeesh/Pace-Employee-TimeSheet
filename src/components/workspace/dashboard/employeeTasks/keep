import filterFactory, { selectFilter } from 'react-bootstrap-table2-filter';
import { getTasks } from '../../../../actions/task/taskAction';
import { useSelector } from 'react-redux';


const taskHeader = [
     
      {
        dataField: 'title',
        text: 'Title',
        headerAttrs: {
          hidden:true
        }
      },
      {
        dataField: 'dueDate',
        text: 'Due Date',
        headerAttrs: {
          hidden:true
        }
      },
      {
        dataField: 'completed',
        text: 'Status',
        headerAttrs: {
          hidden:true
        },
        // formatter: cell => selectOptionsArr.filter(opt => opt.value === cell)[0].label || '',
        //   filter: selectFilter({
        //     options: selectOptionsArr
        //   })
      },
];


taskDetails =  {
  onDoubleClick: (e, row, rowIndex) => { 
      this.props.history.push(`/dashboard/task/view-task/${row.id}`)
  }
};
 rowEvents = { this.taskDetails }
          noDataIndication={'No available task'}
          filter={ filterFactory() }


class AllTasks extends Component {
  constructor(props){
    super(props)
    this.state = {
  
    }
}

componentDidMount() {
  const {FetchTask} = this.props;
  FetchTask();
}

shouldComponentRender() {
  const {pending} = this.props;
  if(pending === false){ 
  return false;
  }
  return true;
}

// double click to view taskDetails
taskDetails =  {
  onDoubleClick: (e, row, rowIndex) => { 
      this.props.history.push(`/dashboard/task/view-task/${row.id}`)
  }
};

  render() {
    const { tasks} = this.props;
    const selectRow = {
      mode: 'checkbox',
    };
    return (
      <div >
        
        <Table
          keyField='id'
          title="Inbox (11)"
          data={ tasks }
          columns={taskHeader}
          bordered= { false }
          selectRow = {selectRow}
          enableSearch = { true }
          pagination = { paginationFactory() }
          controlHeader = { navigate }
          rowEvents = { this.taskDetails }
          noDataIndication={'No available task'}
          filter={ filterFactory() }
        />
      </div>
    )
  }
}


const mapStateToProps = state => ({
  tasks: state.task.allTasks,
  pending:getTasks(state)
})


export default AllTasks;

